/* tslint:disable */
/* eslint-disable */
/**
 * BMM Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BrowseGet200ResponseInner,
  DocumentList,
} from '../models';
import {
    BrowseGet200ResponseInnerFromJSON,
    BrowseGet200ResponseInnerToJSON,
    DocumentListFromJSON,
    DocumentListToJSON,
} from '../models';

export interface BrowseAudiobooksGetRequest {
    skip?: number;
    take?: number;
}

export interface BrowseEventsGetRequest {
    skip?: number;
    take?: number;
}

/**
 * 
 */
export class BrowseApi extends runtime.BaseAPI {

    /**
     */
    async browseAudiobooksGetRaw(requestParameters: BrowseAudiobooksGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentList>> {
        const queryParameters: any = {};

        if (requestParameters.skip !== undefined) {
            queryParameters['Skip'] = requestParameters.skip;
        }

        if (requestParameters.take !== undefined) {
            queryParameters['Take'] = requestParameters.take;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Browse/audiobooks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentListFromJSON(jsonValue));
    }

    /**
     */
    async browseAudiobooksGet(requestParameters: BrowseAudiobooksGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentList> {
        const response = await this.browseAudiobooksGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async browseEventsGetRaw(requestParameters: BrowseEventsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentList>> {
        const queryParameters: any = {};

        if (requestParameters.skip !== undefined) {
            queryParameters['Skip'] = requestParameters.skip;
        }

        if (requestParameters.take !== undefined) {
            queryParameters['Take'] = requestParameters.take;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Browse/events`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentListFromJSON(jsonValue));
    }

    /**
     */
    async browseEventsGet(requestParameters: BrowseEventsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentList> {
        const response = await this.browseEventsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async browseGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BrowseGet200ResponseInner>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Browse`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BrowseGet200ResponseInnerFromJSON));
    }

    /**
     */
    async browseGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BrowseGet200ResponseInner>> {
        const response = await this.browseGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async browseMusicGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentList>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Browse/music`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentListFromJSON(jsonValue));
    }

    /**
     */
    async browseMusicGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentList> {
        const response = await this.browseMusicGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async browsePodcastsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentList>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Browse/podcasts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentListFromJSON(jsonValue));
    }

    /**
     */
    async browsePodcastsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentList> {
        const response = await this.browsePodcastsGetRaw(initOverrides);
        return await response.value();
    }

}
