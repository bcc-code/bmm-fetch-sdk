/* tslint:disable */
/* eslint-disable */
/**
 * BMM Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LanguageEnum,
  StoreTranscriptionEditSuggestionsSuggestion,
  TrackTranslationTranscriptionSegment,
} from '../models/index';
import {
    LanguageEnumFromJSON,
    LanguageEnumToJSON,
    StoreTranscriptionEditSuggestionsSuggestionFromJSON,
    StoreTranscriptionEditSuggestionsSuggestionToJSON,
    TrackTranslationTranscriptionSegmentFromJSON,
    TrackTranslationTranscriptionSegmentToJSON,
} from '../models/index';

export interface TranscriptionTrackIdLanguageFirstLastGetRequest {
    trackId: number;
    language: LanguageEnum;
    first: number;
    last: number;
}

export interface TranscriptionTrackIdLanguagePostRequest {
    trackId: number;
    language: LanguageEnum;
    storeTranscriptionEditSuggestionsSuggestion: Array<StoreTranscriptionEditSuggestionsSuggestion>;
}

/**
 * 
 */
export class TranscriptionApi extends runtime.BaseAPI {

    /**
     */
    async transcriptionTrackIdLanguageFirstLastGetRaw(requestParameters: TranscriptionTrackIdLanguageFirstLastGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TrackTranslationTranscriptionSegment>>> {
        if (requestParameters.trackId === null || requestParameters.trackId === undefined) {
            throw new runtime.RequiredError('trackId','Required parameter requestParameters.trackId was null or undefined when calling transcriptionTrackIdLanguageFirstLastGet.');
        }

        if (requestParameters.language === null || requestParameters.language === undefined) {
            throw new runtime.RequiredError('language','Required parameter requestParameters.language was null or undefined when calling transcriptionTrackIdLanguageFirstLastGet.');
        }

        if (requestParameters.first === null || requestParameters.first === undefined) {
            throw new runtime.RequiredError('first','Required parameter requestParameters.first was null or undefined when calling transcriptionTrackIdLanguageFirstLastGet.');
        }

        if (requestParameters.last === null || requestParameters.last === undefined) {
            throw new runtime.RequiredError('last','Required parameter requestParameters.last was null or undefined when calling transcriptionTrackIdLanguageFirstLastGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/transcription/{trackId}/{language}/{first}/{last}`.replace(`{${"trackId"}}`, encodeURIComponent(String(requestParameters.trackId))).replace(`{${"language"}}`, encodeURIComponent(String(requestParameters.language))).replace(`{${"first"}}`, encodeURIComponent(String(requestParameters.first))).replace(`{${"last"}}`, encodeURIComponent(String(requestParameters.last))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TrackTranslationTranscriptionSegmentFromJSON));
    }

    /**
     */
    async transcriptionTrackIdLanguageFirstLastGet(requestParameters: TranscriptionTrackIdLanguageFirstLastGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TrackTranslationTranscriptionSegment>> {
        const response = await this.transcriptionTrackIdLanguageFirstLastGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async transcriptionTrackIdLanguagePostRaw(requestParameters: TranscriptionTrackIdLanguagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.trackId === null || requestParameters.trackId === undefined) {
            throw new runtime.RequiredError('trackId','Required parameter requestParameters.trackId was null or undefined when calling transcriptionTrackIdLanguagePost.');
        }

        if (requestParameters.language === null || requestParameters.language === undefined) {
            throw new runtime.RequiredError('language','Required parameter requestParameters.language was null or undefined when calling transcriptionTrackIdLanguagePost.');
        }

        if (requestParameters.storeTranscriptionEditSuggestionsSuggestion === null || requestParameters.storeTranscriptionEditSuggestionsSuggestion === undefined) {
            throw new runtime.RequiredError('storeTranscriptionEditSuggestionsSuggestion','Required parameter requestParameters.storeTranscriptionEditSuggestionsSuggestion was null or undefined when calling transcriptionTrackIdLanguagePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/transcription/{trackId}/{language}`.replace(`{${"trackId"}}`, encodeURIComponent(String(requestParameters.trackId))).replace(`{${"language"}}`, encodeURIComponent(String(requestParameters.language))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.storeTranscriptionEditSuggestionsSuggestion.map(StoreTranscriptionEditSuggestionsSuggestionToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async transcriptionTrackIdLanguagePost(requestParameters: TranscriptionTrackIdLanguagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.transcriptionTrackIdLanguagePostRaw(requestParameters, initOverrides);
    }

}
