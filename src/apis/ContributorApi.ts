/* tslint:disable */
/* eslint-disable */
/**
 * BMM Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ContributorModel,
  PublishedFilter,
  TrackModel,
} from '../models/index';
import {
    ContributorModelFromJSON,
    ContributorModelToJSON,
    PublishedFilterFromJSON,
    PublishedFilterToJSON,
    TrackModelFromJSON,
    TrackModelToJSON,
} from '../models/index';

export interface ContributorIdCoverGetRequest {
    id: number;
}

export interface ContributorIdGetRequest {
    id: number;
    unpublished?: PublishedFilter;
}

export interface ContributorIdRandomGetRequest {
    id: number;
    size?: number;
}

export interface ContributorIdTrackGetRequest {
    id: number;
    unpublished?: PublishedFilter;
    from?: number;
    size?: number;
}

export interface ContributorSearchTermGetRequest {
    term: string;
    size?: number;
}

export interface ContributorSearchUnpublishedTermGetRequest {
    term: string;
    size?: number;
}

export interface ContributorSuggesterCompletionTermGetRequest {
    term: string;
    size?: number;
}

/**
 * 
 */
export class ContributorApi extends runtime.BaseAPI {

    /**
     */
    async contributorGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ContributorModel>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/contributor`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ContributorModelFromJSON));
    }

    /**
     */
    async contributorGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ContributorModel>> {
        const response = await this.contributorGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async contributorIdCoverGetRaw(requestParameters: ContributorIdCoverGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling contributorIdCoverGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/contributor/{id}/cover`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async contributorIdCoverGet(requestParameters: ContributorIdCoverGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.contributorIdCoverGetRaw(requestParameters, initOverrides);
    }

    /**
     */
    async contributorIdGetRaw(requestParameters: ContributorIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContributorModel>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling contributorIdGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.unpublished !== undefined) {
            queryParameters['unpublished'] = requestParameters.unpublished;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/contributor/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContributorModelFromJSON(jsonValue));
    }

    /**
     */
    async contributorIdGet(requestParameters: ContributorIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContributorModel> {
        const response = await this.contributorIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async contributorIdRandomGetRaw(requestParameters: ContributorIdRandomGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TrackModel>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling contributorIdRandomGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/contributor/{id}/random`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TrackModelFromJSON));
    }

    /**
     */
    async contributorIdRandomGet(requestParameters: ContributorIdRandomGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TrackModel>> {
        const response = await this.contributorIdRandomGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async contributorIdTrackGetRaw(requestParameters: ContributorIdTrackGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TrackModel>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling contributorIdTrackGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.unpublished !== undefined) {
            queryParameters['unpublished'] = requestParameters.unpublished;
        }

        if (requestParameters.from !== undefined) {
            queryParameters['from'] = requestParameters.from;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/contributor/{id}/track`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TrackModelFromJSON));
    }

    /**
     */
    async contributorIdTrackGet(requestParameters: ContributorIdTrackGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TrackModel>> {
        const response = await this.contributorIdTrackGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async contributorSearchTermGetRaw(requestParameters: ContributorSearchTermGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ContributorModel>>> {
        if (requestParameters.term === null || requestParameters.term === undefined) {
            throw new runtime.RequiredError('term','Required parameter requestParameters.term was null or undefined when calling contributorSearchTermGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/contributor/search/{term}`.replace(`{${"term"}}`, encodeURIComponent(String(requestParameters.term))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ContributorModelFromJSON));
    }

    /**
     */
    async contributorSearchTermGet(requestParameters: ContributorSearchTermGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ContributorModel>> {
        const response = await this.contributorSearchTermGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async contributorSearchUnpublishedTermGetRaw(requestParameters: ContributorSearchUnpublishedTermGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ContributorModel>>> {
        if (requestParameters.term === null || requestParameters.term === undefined) {
            throw new runtime.RequiredError('term','Required parameter requestParameters.term was null or undefined when calling contributorSearchUnpublishedTermGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/contributor/search_unpublished/{term}`.replace(`{${"term"}}`, encodeURIComponent(String(requestParameters.term))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ContributorModelFromJSON));
    }

    /**
     */
    async contributorSearchUnpublishedTermGet(requestParameters: ContributorSearchUnpublishedTermGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ContributorModel>> {
        const response = await this.contributorSearchUnpublishedTermGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async contributorSuggesterCompletionTermGetRaw(requestParameters: ContributorSuggesterCompletionTermGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ContributorModel>>> {
        if (requestParameters.term === null || requestParameters.term === undefined) {
            throw new runtime.RequiredError('term','Required parameter requestParameters.term was null or undefined when calling contributorSuggesterCompletionTermGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/contributor/suggester/completion/{term}`.replace(`{${"term"}}`, encodeURIComponent(String(requestParameters.term))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ContributorModelFromJSON));
    }

    /**
     */
    async contributorSuggesterCompletionTermGet(requestParameters: ContributorSuggesterCompletionTermGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ContributorModel>> {
        const response = await this.contributorSuggesterCompletionTermGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
