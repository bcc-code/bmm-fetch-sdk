/* tslint:disable */
/* eslint-disable */
/**
 * BMM Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateTrackPlayedEventsCommandEvent,
  ForbildePoints,
  ForbildeRulesQueryRules,
  GetYearInReviewOverviewSlide,
  LanguageEnum,
  ListeningEvent,
  StreakPoint,
} from '../models';
import {
    CreateTrackPlayedEventsCommandEventFromJSON,
    CreateTrackPlayedEventsCommandEventToJSON,
    ForbildePointsFromJSON,
    ForbildePointsToJSON,
    ForbildeRulesQueryRulesFromJSON,
    ForbildeRulesQueryRulesToJSON,
    GetYearInReviewOverviewSlideFromJSON,
    GetYearInReviewOverviewSlideToJSON,
    LanguageEnumFromJSON,
    LanguageEnumToJSON,
    ListeningEventFromJSON,
    ListeningEventToJSON,
    StreakPointFromJSON,
    StreakPointToJSON,
} from '../models';

export interface StatisticsAchievementNameAcknowledgePutRequest {
    name: string;
}

export interface StatisticsListeningPostRequest {
    listeningEvent: Array<ListeningEvent>;
}

export interface StatisticsProjectProgressGetRequest {
    lang?: LanguageEnum;
    os?: string;
    theme?: string;
}

export interface StatisticsProjectRulesGetRequest {
    lang?: LanguageEnum;
}

export interface StatisticsStreakpointPostRequest {
    streakPoint: Array<StreakPoint>;
}

export interface StatisticsTrackPlayedPostRequest {
    createTrackPlayedEventsCommandEvent: Array<CreateTrackPlayedEventsCommandEvent>;
}

/**
 * 
 */
export class StatisticsApi extends runtime.BaseAPI {

    /**
     */
    async statisticsAchievementDeleteRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Statistics/achievement`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async statisticsAchievementDelete(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.statisticsAchievementDeleteRaw(initOverrides);
    }

    /**
     */
    async statisticsAchievementNameAcknowledgePutRaw(requestParameters: StatisticsAchievementNameAcknowledgePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling statisticsAchievementNameAcknowledgePut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Statistics/achievement/{name}/acknowledge`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async statisticsAchievementNameAcknowledgePut(requestParameters: StatisticsAchievementNameAcknowledgePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.statisticsAchievementNameAcknowledgePutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async statisticsListeningPostRaw(requestParameters: StatisticsListeningPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.listeningEvent === null || requestParameters.listeningEvent === undefined) {
            throw new runtime.RequiredError('listeningEvent','Required parameter requestParameters.listeningEvent was null or undefined when calling statisticsListeningPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/Statistics/listening`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.listeningEvent.map(ListeningEventToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async statisticsListeningPost(requestParameters: StatisticsListeningPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.statisticsListeningPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async statisticsProjectProgressGetRaw(requestParameters: StatisticsProjectProgressGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ForbildePoints>> {
        const queryParameters: any = {};

        if (requestParameters.lang !== undefined) {
            queryParameters['lang'] = requestParameters.lang;
        }

        if (requestParameters.os !== undefined) {
            queryParameters['os'] = requestParameters.os;
        }

        if (requestParameters.theme !== undefined) {
            queryParameters['theme'] = requestParameters.theme;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Statistics/project/progress`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ForbildePointsFromJSON(jsonValue));
    }

    /**
     */
    async statisticsProjectProgressGet(requestParameters: StatisticsProjectProgressGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ForbildePoints> {
        const response = await this.statisticsProjectProgressGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async statisticsProjectRulesGetRaw(requestParameters: StatisticsProjectRulesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ForbildeRulesQueryRules>> {
        const queryParameters: any = {};

        if (requestParameters.lang !== undefined) {
            queryParameters['lang'] = requestParameters.lang;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Statistics/project/rules`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ForbildeRulesQueryRulesFromJSON(jsonValue));
    }

    /**
     */
    async statisticsProjectRulesGet(requestParameters: StatisticsProjectRulesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ForbildeRulesQueryRules> {
        const response = await this.statisticsProjectRulesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async statisticsStreakpointPostRaw(requestParameters: StatisticsStreakpointPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.streakPoint === null || requestParameters.streakPoint === undefined) {
            throw new runtime.RequiredError('streakPoint','Required parameter requestParameters.streakPoint was null or undefined when calling statisticsStreakpointPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/Statistics/streakpoint`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.streakPoint.map(StreakPointToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async statisticsStreakpointPost(requestParameters: StatisticsStreakpointPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.statisticsStreakpointPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async statisticsTrackPlayedPostRaw(requestParameters: StatisticsTrackPlayedPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.createTrackPlayedEventsCommandEvent === null || requestParameters.createTrackPlayedEventsCommandEvent === undefined) {
            throw new runtime.RequiredError('createTrackPlayedEventsCommandEvent','Required parameter requestParameters.createTrackPlayedEventsCommandEvent was null or undefined when calling statisticsTrackPlayedPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/Statistics/track/played`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.createTrackPlayedEventsCommandEvent.map(CreateTrackPlayedEventsCommandEventToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async statisticsTrackPlayedPost(requestParameters: StatisticsTrackPlayedPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.statisticsTrackPlayedPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async statisticsYearInReviewFkGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Statistics/year-in-review/fk`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async statisticsYearInReviewFkGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.statisticsYearInReviewFkGetRaw(initOverrides);
    }

    /**
     */
    async statisticsYearInReviewHoursGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Statistics/year-in-review/hours`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async statisticsYearInReviewHoursGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.statisticsYearInReviewHoursGetRaw(initOverrides);
    }

    /**
     */
    async statisticsYearInReviewOverviewGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetYearInReviewOverviewSlide>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Statistics/year-in-review/overview`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetYearInReviewOverviewSlideFromJSON));
    }

    /**
     */
    async statisticsYearInReviewOverviewGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetYearInReviewOverviewSlide>> {
        const response = await this.statisticsYearInReviewOverviewGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async statisticsYearInReviewSongsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Statistics/year-in-review/songs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async statisticsYearInReviewSongsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.statisticsYearInReviewSongsGetRaw(initOverrides);
    }

}
