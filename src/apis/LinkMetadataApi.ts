/* tslint:disable */
/* eslint-disable */
/**
 * BMM Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LanguageEnum,
  MetadataModel,
} from '../models';
import {
    LanguageEnumFromJSON,
    LanguageEnumToJSON,
    MetadataModelFromJSON,
    MetadataModelToJSON,
} from '../models';

export interface LinkMetadataTrackIdGetRequest {
    id: number;
    language: LanguageEnum;
}

export interface LinkMetadataTrackIdLanguageGetRequest {
    id: number;
    language: LanguageEnum;
}

/**
 * 
 */
export class LinkMetadataApi extends runtime.BaseAPI {

    /**
     */
    async linkMetadataTrackIdGetRaw(requestParameters: LinkMetadataTrackIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MetadataModel>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling linkMetadataTrackIdGet.');
        }

        if (requestParameters.language === null || requestParameters.language === undefined) {
            throw new runtime.RequiredError('language','Required parameter requestParameters.language was null or undefined when calling linkMetadataTrackIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/LinkMetadata/track/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"language"}}`, encodeURIComponent(String(requestParameters.language))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MetadataModelFromJSON(jsonValue));
    }

    /**
     */
    async linkMetadataTrackIdGet(requestParameters: LinkMetadataTrackIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MetadataModel> {
        const response = await this.linkMetadataTrackIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async linkMetadataTrackIdLanguageGetRaw(requestParameters: LinkMetadataTrackIdLanguageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MetadataModel>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling linkMetadataTrackIdLanguageGet.');
        }

        if (requestParameters.language === null || requestParameters.language === undefined) {
            throw new runtime.RequiredError('language','Required parameter requestParameters.language was null or undefined when calling linkMetadataTrackIdLanguageGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/LinkMetadata/track/{id}/{language}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"language"}}`, encodeURIComponent(String(requestParameters.language))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MetadataModelFromJSON(jsonValue));
    }

    /**
     */
    async linkMetadataTrackIdLanguageGet(requestParameters: LinkMetadataTrackIdLanguageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MetadataModel> {
        const response = await this.linkMetadataTrackIdLanguageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
