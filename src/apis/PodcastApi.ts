/* tslint:disable */
/* eslint-disable */
/**
 * BMM Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PodcastModel,
  PublishedFilter,
  TrackModel,
} from '../models';
import {
    PodcastModelFromJSON,
    PodcastModelToJSON,
    PublishedFilterFromJSON,
    PublishedFilterToJSON,
    TrackModelFromJSON,
    TrackModelToJSON,
} from '../models';

export interface PodcastIdCoverGetRequest {
    id: number;
}

export interface PodcastIdGetRequest {
    id: number;
}

export interface PodcastIdRandomGetRequest {
    id: number;
}

export interface PodcastIdShuffleGetRequest {
    id: number;
    size?: number;
}

export interface PodcastIdTrackGetRequest {
    id: number;
    unpublished?: PublishedFilter;
    size?: number;
    from?: number;
}

/**
 * 
 */
export class PodcastApi extends runtime.BaseAPI {

    /**
     */
    async podcastGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PodcastModel>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/podcast`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PodcastModelFromJSON));
    }

    /**
     */
    async podcastGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PodcastModel>> {
        const response = await this.podcastGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async podcastIdCoverGetRaw(requestParameters: PodcastIdCoverGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling podcastIdCoverGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/podcast/{id}/cover`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async podcastIdCoverGet(requestParameters: PodcastIdCoverGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.podcastIdCoverGetRaw(requestParameters, initOverrides);
    }

    /**
     */
    async podcastIdGetRaw(requestParameters: PodcastIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PodcastModel>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling podcastIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/podcast/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PodcastModelFromJSON(jsonValue));
    }

    /**
     */
    async podcastIdGet(requestParameters: PodcastIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PodcastModel> {
        const response = await this.podcastIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async podcastIdRandomGetRaw(requestParameters: PodcastIdRandomGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TrackModel>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling podcastIdRandomGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/podcast/{id}/random`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TrackModelFromJSON(jsonValue));
    }

    /**
     */
    async podcastIdRandomGet(requestParameters: PodcastIdRandomGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TrackModel> {
        const response = await this.podcastIdRandomGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async podcastIdShuffleGetRaw(requestParameters: PodcastIdShuffleGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TrackModel>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling podcastIdShuffleGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/podcast/{id}/shuffle`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TrackModelFromJSON));
    }

    /**
     */
    async podcastIdShuffleGet(requestParameters: PodcastIdShuffleGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TrackModel>> {
        const response = await this.podcastIdShuffleGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async podcastIdTrackGetRaw(requestParameters: PodcastIdTrackGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TrackModel>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling podcastIdTrackGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.unpublished !== undefined) {
            queryParameters['unpublished'] = requestParameters.unpublished;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.from !== undefined) {
            queryParameters['from'] = requestParameters.from;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/podcast/{id}/track`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TrackModelFromJSON));
    }

    /**
     */
    async podcastIdTrackGet(requestParameters: PodcastIdTrackGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TrackModel>> {
        const response = await this.podcastIdTrackGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
