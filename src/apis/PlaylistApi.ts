/* tslint:disable */
/* eslint-disable */
/**
 * BMM Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DocumentList,
  LanguageEnum,
  Playlist,
  PlaylistCollection,
  PlaylistModel,
  PublishedFilter,
  TrackListOverviewVmPlaylist,
  TrackModel,
} from '../models';
import {
    DocumentListFromJSON,
    DocumentListToJSON,
    LanguageEnumFromJSON,
    LanguageEnumToJSON,
    PlaylistFromJSON,
    PlaylistToJSON,
    PlaylistCollectionFromJSON,
    PlaylistCollectionToJSON,
    PlaylistModelFromJSON,
    PlaylistModelToJSON,
    PublishedFilterFromJSON,
    PublishedFilterToJSON,
    TrackListOverviewVmPlaylistFromJSON,
    TrackListOverviewVmPlaylistToJSON,
    TrackModelFromJSON,
    TrackModelToJSON,
} from '../models';

export interface PlaylistCollectionPutRequest {
    playlistCollection?: PlaylistCollection;
}

export interface PlaylistDocumentsGetRequest {
    lang?: LanguageEnum;
    age?: number;
}

export interface PlaylistIdCoverGetRequest {
    id: number;
}

export interface PlaylistIdCoverPostRequest {
    id: number;
    playlistId?: number;
    file?: Blob;
}

export interface PlaylistIdCoverPutRequest {
    id: number;
    playlistId?: number;
    file?: Blob;
}

export interface PlaylistIdDeleteRequest {
    id: number;
}

export interface PlaylistIdGetRequest {
    id: number;
    raw?: boolean;
}

export interface PlaylistIdPutRequest {
    id: number;
    playlist?: Playlist;
}

export interface PlaylistIdTrackGetRequest {
    id: number;
    unpublished?: PublishedFilter;
}

export interface PlaylistPostRequest {
    playlist?: Playlist;
}

/**
 * 
 */
export class PlaylistApi extends runtime.BaseAPI {

    /**
     */
    async playlistCollectionPutRaw(requestParameters: PlaylistCollectionPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/playlist/collection`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PlaylistCollectionToJSON(requestParameters.playlistCollection),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async playlistCollectionPut(requestParameters: PlaylistCollectionPutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.playlistCollectionPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async playlistDocumentsGetRaw(requestParameters: PlaylistDocumentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentList>> {
        const queryParameters: any = {};

        if (requestParameters.lang !== undefined) {
            queryParameters['lang'] = requestParameters.lang;
        }

        if (requestParameters.age !== undefined) {
            queryParameters['age'] = requestParameters.age;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/playlist/documents`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentListFromJSON(jsonValue));
    }

    /**
     */
    async playlistDocumentsGet(requestParameters: PlaylistDocumentsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentList> {
        const response = await this.playlistDocumentsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List of playlists.  The apps use this endpoint to load single playlists as well (as optimization)
     */
    async playlistGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PlaylistModel>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/playlist`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PlaylistModelFromJSON));
    }

    /**
     * List of playlists.  The apps use this endpoint to load single playlists as well (as optimization)
     */
    async playlistGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PlaylistModel>> {
        const response = await this.playlistGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async playlistIdCoverGetRaw(requestParameters: PlaylistIdCoverGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling playlistIdCoverGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/playlist/{id}/cover`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async playlistIdCoverGet(requestParameters: PlaylistIdCoverGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.playlistIdCoverGetRaw(requestParameters, initOverrides);
    }

    /**
     */
    async playlistIdCoverPostRaw(requestParameters: PlaylistIdCoverPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling playlistIdCoverPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.playlistId !== undefined) {
            formParams.append('PlaylistId', requestParameters.playlistId as any);
        }

        if (requestParameters.file !== undefined) {
            formParams.append('File', requestParameters.file as any);
        }

        const response = await this.request({
            path: `/playlist/{id}/cover`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async playlistIdCoverPost(requestParameters: PlaylistIdCoverPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.playlistIdCoverPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async playlistIdCoverPutRaw(requestParameters: PlaylistIdCoverPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling playlistIdCoverPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.playlistId !== undefined) {
            formParams.append('PlaylistId', requestParameters.playlistId as any);
        }

        if (requestParameters.file !== undefined) {
            formParams.append('File', requestParameters.file as any);
        }

        const response = await this.request({
            path: `/playlist/{id}/cover`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async playlistIdCoverPut(requestParameters: PlaylistIdCoverPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.playlistIdCoverPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async playlistIdDeleteRaw(requestParameters: PlaylistIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling playlistIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/playlist/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async playlistIdDelete(requestParameters: PlaylistIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.playlistIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async playlistIdGetRaw(requestParameters: PlaylistIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Playlist>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling playlistIdGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.raw !== undefined) {
            queryParameters['raw'] = requestParameters.raw;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/playlist/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlaylistFromJSON(jsonValue));
    }

    /**
     */
    async playlistIdGet(requestParameters: PlaylistIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Playlist> {
        const response = await this.playlistIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async playlistIdPutRaw(requestParameters: PlaylistIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling playlistIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/playlist/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PlaylistToJSON(requestParameters.playlist),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async playlistIdPut(requestParameters: PlaylistIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.playlistIdPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async playlistIdTrackGetRaw(requestParameters: PlaylistIdTrackGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TrackModel>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling playlistIdTrackGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.unpublished !== undefined) {
            queryParameters['unpublished'] = requestParameters.unpublished;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/playlist/{id}/track`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TrackModelFromJSON));
    }

    /**
     */
    async playlistIdTrackGet(requestParameters: PlaylistIdTrackGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TrackModel>> {
        const response = await this.playlistIdTrackGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async playlistOverviewGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TrackListOverviewVmPlaylist>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/playlist/overview`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TrackListOverviewVmPlaylistFromJSON(jsonValue));
    }

    /**
     */
    async playlistOverviewGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TrackListOverviewVmPlaylist> {
        const response = await this.playlistOverviewGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async playlistPostRaw(requestParameters: PlaylistPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/playlist`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PlaylistToJSON(requestParameters.playlist),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async playlistPost(requestParameters: PlaylistPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.playlistPostRaw(requestParameters, initOverrides);
    }

}
