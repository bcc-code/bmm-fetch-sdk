/* tslint:disable */
/* eslint-disable */
/**
 * BMM Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { GuessTracksQueryResultGuessResult } from './GuessTracksQueryResultGuessResult';
import {
    GuessTracksQueryResultGuessResultFromJSON,
    GuessTracksQueryResultGuessResultFromJSONTyped,
    GuessTracksQueryResultGuessResultToJSON,
} from './GuessTracksQueryResultGuessResult';

/**
 * 
 * @export
 * @interface GuessTracksQueryResult
 */
export interface GuessTracksQueryResult {
    /**
     * 
     * @type {Array<string>}
     * @memberof GuessTracksQueryResult
     */
    unguessable?: Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof GuessTracksQueryResult
     */
    unknownBmmId?: Array<string> | null;
    /**
     * 
     * @type {Array<GuessTracksQueryResultGuessResult>}
     * @memberof GuessTracksQueryResult
     */
    guessed?: Array<GuessTracksQueryResultGuessResult> | null;
}

/**
 * Check if a given object implements the GuessTracksQueryResult interface.
 */
export function instanceOfGuessTracksQueryResult(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function GuessTracksQueryResultFromJSON(json: any): GuessTracksQueryResult {
    return GuessTracksQueryResultFromJSONTyped(json, false);
}

export function GuessTracksQueryResultFromJSONTyped(json: any, ignoreDiscriminator: boolean): GuessTracksQueryResult {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'unguessable': !exists(json, 'unguessable') ? undefined : json['unguessable'],
        'unknownBmmId': !exists(json, 'unknownBmmId') ? undefined : json['unknownBmmId'],
        'guessed': !exists(json, 'guessed') ? undefined : (json['guessed'] === null ? null : (json['guessed'] as Array<any>).map(GuessTracksQueryResultGuessResultFromJSON)),
    };
}

export function GuessTracksQueryResultToJSON(value?: GuessTracksQueryResult | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'unguessable': value.unguessable,
        'unknownBmmId': value.unknownBmmId,
        'guessed': value.guessed === undefined ? undefined : (value.guessed === null ? null : (value.guessed as Array<any>).map(GuessTracksQueryResultGuessResultToJSON)),
    };
}

