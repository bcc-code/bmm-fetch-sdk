/* tslint:disable */
/* eslint-disable */
/**
 * BMM Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SectionHeaderModel
 */
export interface SectionHeaderModel {
    /**
     * 
     * @type {string}
     * @memberof SectionHeaderModel
     */
    readonly type: SectionHeaderModelTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof SectionHeaderModel
     */
    title?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SectionHeaderModel
     */
    translationParent?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SectionHeaderModel
     */
    translationId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SectionHeaderModel
     */
    link?: string | null;
    /**
     * 
     * @type {number}
     * @memberof SectionHeaderModel
     */
    id: number;
    /**
     * 
     * @type {boolean}
     * @memberof SectionHeaderModel
     */
    useCoverCarousel?: boolean;
}


/**
 * @export
 */
export const SectionHeaderModelTypeEnum = {
    SectionHeader: 'section_header'
} as const;
export type SectionHeaderModelTypeEnum = typeof SectionHeaderModelTypeEnum[keyof typeof SectionHeaderModelTypeEnum];


/**
 * Check if a given object implements the SectionHeaderModel interface.
 */
export function instanceOfSectionHeaderModel(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "id" in value;

    return isInstance;
}

export function SectionHeaderModelFromJSON(json: any): SectionHeaderModel {
    return SectionHeaderModelFromJSONTyped(json, false);
}

export function SectionHeaderModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): SectionHeaderModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': json['type'],
        'title': !exists(json, 'title') ? undefined : json['title'],
        'translationParent': !exists(json, 'translation_parent') ? undefined : json['translation_parent'],
        'translationId': !exists(json, 'translation_id') ? undefined : json['translation_id'],
        'link': !exists(json, 'link') ? undefined : json['link'],
        'id': json['id'],
        'useCoverCarousel': !exists(json, 'use_cover_carousel') ? undefined : json['use_cover_carousel'],
    };
}

export function SectionHeaderModelToJSON(value?: SectionHeaderModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'title': value.title,
        'translation_parent': value.translationParent,
        'translation_id': value.translationId,
        'link': value.link,
        'id': value.id,
        'use_cover_carousel': value.useCoverCarousel,
    };
}

