/* tslint:disable */
/* eslint-disable */
/**
 * BMM Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PlaylistPlaylistTranslation } from './PlaylistPlaylistTranslation';
import {
    PlaylistPlaylistTranslationFromJSON,
    PlaylistPlaylistTranslationFromJSONTyped,
    PlaylistPlaylistTranslationToJSON,
} from './PlaylistPlaylistTranslation';

/**
 * 
 * @export
 * @interface Playlist
 */
export interface Playlist {
    /**
     * 
     * @type {string}
     * @memberof Playlist
     */
    readonly type?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Playlist
     */
    cover?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Playlist
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Playlist
     */
    readonly idString?: string | null;
    /**
     * 
     * @type {Date}
     * @memberof Playlist
     */
    modifiedAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Playlist
     */
    createdAt?: Date;
    /**
     * 
     * @type {Array<string>}
     * @memberof Playlist
     */
    tags?: Array<string> | null;
    /**
     * 
     * @type {number}
     * @memberof Playlist
     */
    trackCollectionId?: number | null;
    /**
     * 
     * @type {Array<PlaylistPlaylistTranslation>}
     * @memberof Playlist
     */
    translations?: Array<PlaylistPlaylistTranslation> | null;
    /**
     * 
     * @type {any}
     * @memberof Playlist
     */
    compressed?: any | null;
}

/**
 * Check if a given object implements the Playlist interface.
 */
export function instanceOfPlaylist(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PlaylistFromJSON(json: any): Playlist {
    return PlaylistFromJSONTyped(json, false);
}

export function PlaylistFromJSONTyped(json: any, ignoreDiscriminator: boolean): Playlist {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': !exists(json, 'type') ? undefined : json['type'],
        'cover': !exists(json, 'cover') ? undefined : json['cover'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'idString': !exists(json, 'idString') ? undefined : json['idString'],
        'modifiedAt': !exists(json, 'modifiedAt') ? undefined : (new Date(json['modifiedAt'])),
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'tags': !exists(json, 'tags') ? undefined : json['tags'],
        'trackCollectionId': !exists(json, 'trackCollectionId') ? undefined : json['trackCollectionId'],
        'translations': !exists(json, 'translations') ? undefined : (json['translations'] === null ? null : (json['translations'] as Array<any>).map(PlaylistPlaylistTranslationFromJSON)),
        'compressed': !exists(json, 'compressed') ? undefined : json['compressed'],
    };
}

export function PlaylistToJSON(value?: Playlist | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'cover': value.cover,
        'id': value.id,
        'modifiedAt': value.modifiedAt === undefined ? undefined : (value.modifiedAt.toISOString()),
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'tags': value.tags,
        'trackCollectionId': value.trackCollectionId,
        'translations': value.translations === undefined ? undefined : (value.translations === null ? null : (value.translations as Array<any>).map(PlaylistPlaylistTranslationToJSON)),
        'compressed': value.compressed,
    };
}

