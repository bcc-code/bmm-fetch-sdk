/* tslint:disable */
/* eslint-disable */
/**
 * BMM Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TrackReference } from './TrackReference';
import {
    TrackReferenceFromJSON,
    TrackReferenceFromJSONTyped,
    TrackReferenceToJSON,
} from './TrackReference';

/**
 * 
 * @export
 * @interface TrackCollectionModel
 */
export interface TrackCollectionModel {
    /**
     * 
     * @type {string}
     * @memberof TrackCollectionModel
     */
    readonly type: TrackCollectionModelTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof TrackCollectionModel
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof TrackCollectionModel
     */
    name: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof TrackCollectionModel
     */
    access?: Array<string> | null;
    /**
     * 
     * @type {Array<TrackReference>}
     * @memberof TrackCollectionModel
     */
    trackReferences?: Array<TrackReference> | null;
}


/**
 * @export
 */
export const TrackCollectionModelTypeEnum = {
    TrackCollection: 'track_collection'
} as const;
export type TrackCollectionModelTypeEnum = typeof TrackCollectionModelTypeEnum[keyof typeof TrackCollectionModelTypeEnum];


/**
 * Check if a given object implements the TrackCollectionModel interface.
 */
export function instanceOfTrackCollectionModel(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;

    return isInstance;
}

export function TrackCollectionModelFromJSON(json: any): TrackCollectionModel {
    return TrackCollectionModelFromJSONTyped(json, false);
}

export function TrackCollectionModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): TrackCollectionModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': json['type'],
        'id': json['id'],
        'name': json['name'],
        'access': !exists(json, 'access') ? undefined : json['access'],
        'trackReferences': !exists(json, 'track_references') ? undefined : (json['track_references'] === null ? null : (json['track_references'] as Array<any>).map(TrackReferenceFromJSON)),
    };
}

export function TrackCollectionModelToJSON(value?: TrackCollectionModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'access': value.access,
        'track_references': value.trackReferences === undefined ? undefined : (value.trackReferences === null ? null : (value.trackReferences as Array<any>).map(TrackReferenceToJSON)),
    };
}

