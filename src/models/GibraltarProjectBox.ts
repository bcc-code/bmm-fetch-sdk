/* tslint:disable */
/* eslint-disable */
/**
 * BMM Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AchievementModel } from './AchievementModel';
import {
    AchievementModelFromJSON,
    AchievementModelFromJSONTyped,
    AchievementModelToJSON,
} from './AchievementModel';

/**
 * 
 * @export
 * @interface GibraltarProjectBox
 */
export interface GibraltarProjectBox {
    /**
     * 
     * @type {number}
     * @memberof GibraltarProjectBox
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof GibraltarProjectBox
     */
    readonly type: GibraltarProjectBoxTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof GibraltarProjectBox
     */
    title?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof GibraltarProjectBox
     */
    openByDefault?: boolean;
    /**
     * 
     * @type {number}
     * @memberof GibraltarProjectBox
     */
    points?: number;
    /**
     * 
     * @type {string}
     * @memberof GibraltarProjectBox
     */
    pointsDescription?: string | null;
    /**
     * 
     * @type {Array<AchievementModel>}
     * @memberof GibraltarProjectBox
     */
    achievements?: Array<AchievementModel> | null;
    /**
     * 
     * @type {string}
     * @memberof GibraltarProjectBox
     */
    rulesLinkTitle?: string | null;
}


/**
 * @export
 */
export const GibraltarProjectBoxTypeEnum = {
    GibraltarProjectBox: 'gibraltar_project_box'
} as const;
export type GibraltarProjectBoxTypeEnum = typeof GibraltarProjectBoxTypeEnum[keyof typeof GibraltarProjectBoxTypeEnum];


/**
 * Check if a given object implements the GibraltarProjectBox interface.
 */
export function instanceOfGibraltarProjectBox(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function GibraltarProjectBoxFromJSON(json: any): GibraltarProjectBox {
    return GibraltarProjectBoxFromJSONTyped(json, false);
}

export function GibraltarProjectBoxFromJSONTyped(json: any, ignoreDiscriminator: boolean): GibraltarProjectBox {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'type': json['type'],
        'title': !exists(json, 'title') ? undefined : json['title'],
        'openByDefault': !exists(json, 'open_by_default') ? undefined : json['open_by_default'],
        'points': !exists(json, 'points') ? undefined : json['points'],
        'pointsDescription': !exists(json, 'points_description') ? undefined : json['points_description'],
        'achievements': !exists(json, 'achievements') ? undefined : (json['achievements'] === null ? null : (json['achievements'] as Array<any>).map(AchievementModelFromJSON)),
        'rulesLinkTitle': !exists(json, 'rules_link_title') ? undefined : json['rules_link_title'],
    };
}

export function GibraltarProjectBoxToJSON(value?: GibraltarProjectBox | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'title': value.title,
        'open_by_default': value.openByDefault,
        'points': value.points,
        'points_description': value.pointsDescription,
        'achievements': value.achievements === undefined ? undefined : (value.achievements === null ? null : (value.achievements as Array<any>).map(AchievementModelToJSON)),
        'rules_link_title': value.rulesLinkTitle,
    };
}

