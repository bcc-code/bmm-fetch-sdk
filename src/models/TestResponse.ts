/* tslint:disable */
/* eslint-disable */
/**
 * BMM Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TrackSubtype } from './TrackSubtype';
import {
    TrackSubtypeFromJSON,
    TrackSubtypeFromJSONTyped,
    TrackSubtypeToJSON,
} from './TrackSubtype';

/**
 * 
 * @export
 * @interface TestResponse
 */
export interface TestResponse {
    /**
     * 
     * @type {Array<string>}
     * @memberof TestResponse
     */
    content?: Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof TestResponse
     */
    contentType?: Array<string> | null;
    /**
     * 
     * @type {number}
     * @memberof TestResponse
     */
    from?: number;
    /**
     * 
     * @type {string}
     * @memberof TestResponse
     */
    variable?: string | null;
    /**
     * 
     * @type {Array<TrackSubtype>}
     * @memberof TestResponse
     */
    subtype?: Array<TrackSubtype> | null;
}

/**
 * Check if a given object implements the TestResponse interface.
 */
export function instanceOfTestResponse(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TestResponseFromJSON(json: any): TestResponse {
    return TestResponseFromJSONTyped(json, false);
}

export function TestResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): TestResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'content': !exists(json, 'content') ? undefined : json['content'],
        'contentType': !exists(json, 'content_type') ? undefined : json['content_type'],
        'from': !exists(json, 'from') ? undefined : json['from'],
        'variable': !exists(json, 'variable') ? undefined : json['variable'],
        'subtype': !exists(json, 'subtype') ? undefined : (json['subtype'] === null ? null : (json['subtype'] as Array<any>).map(TrackSubtypeFromJSON)),
    };
}

export function TestResponseToJSON(value?: TestResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'content': value.content,
        'content_type': value.contentType,
        'from': value.from,
        'variable': value.variable,
        'subtype': value.subtype === undefined ? undefined : (value.subtype === null ? null : (value.subtype as Array<any>).map(TrackSubtypeToJSON)),
    };
}

