/* tslint:disable */
/* eslint-disable */
/**
 * BMM Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface TrackTranslationMediumFile
 */
export interface TrackTranslationMediumFile {
    /**
     * 
     * @type {string}
     * @memberof TrackTranslationMediumFile
     */
    mimeType?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TrackTranslationMediumFile
     */
    size?: number;
    /**
     * 
     * @type {number}
     * @memberof TrackTranslationMediumFile
     */
    duration?: number;
    /**
     * 
     * @type {string}
     * @memberof TrackTranslationMediumFile
     */
    path?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TrackTranslationMediumFile
     */
    lufs?: number | null;
    /**
     * 
     * @type {number}
     * @memberof TrackTranslationMediumFile
     */
    dynamicRange?: number | null;
    /**
     * 
     * @type {number}
     * @memberof TrackTranslationMediumFile
     */
    channelCount?: number | null;
    /**
     * 
     * @type {number}
     * @memberof TrackTranslationMediumFile
     */
    bitrate?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof TrackTranslationMediumFile
     */
    variableBitrate?: boolean | null;
}

/**
 * Check if a given object implements the TrackTranslationMediumFile interface.
 */
export function instanceOfTrackTranslationMediumFile(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TrackTranslationMediumFileFromJSON(json: any): TrackTranslationMediumFile {
    return TrackTranslationMediumFileFromJSONTyped(json, false);
}

export function TrackTranslationMediumFileFromJSONTyped(json: any, ignoreDiscriminator: boolean): TrackTranslationMediumFile {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'mimeType': !exists(json, 'mime_type') ? undefined : json['mime_type'],
        'size': !exists(json, 'size') ? undefined : json['size'],
        'duration': !exists(json, 'duration') ? undefined : json['duration'],
        'path': !exists(json, 'path') ? undefined : json['path'],
        'lufs': !exists(json, 'lufs') ? undefined : json['lufs'],
        'dynamicRange': !exists(json, 'dynamic_range') ? undefined : json['dynamic_range'],
        'channelCount': !exists(json, 'channel_count') ? undefined : json['channel_count'],
        'bitrate': !exists(json, 'bitrate') ? undefined : json['bitrate'],
        'variableBitrate': !exists(json, 'variable_bitrate') ? undefined : json['variable_bitrate'],
    };
}

export function TrackTranslationMediumFileToJSON(value?: TrackTranslationMediumFile | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'mime_type': value.mimeType,
        'size': value.size,
        'duration': value.duration,
        'path': value.path,
        'lufs': value.lufs,
        'dynamic_range': value.dynamicRange,
        'channel_count': value.channelCount,
        'bitrate': value.bitrate,
        'variable_bitrate': value.variableBitrate,
    };
}

