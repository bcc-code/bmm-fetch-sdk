/* tslint:disable */
/* eslint-disable */
/**
 * BMM Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Track } from './Track';
import {
    TrackFromJSON,
    TrackFromJSONTyped,
    TrackToJSON,
} from './Track';

/**
 * 
 * @export
 * @interface UpcomingNotificationsModelPodcast
 */
export interface UpcomingNotificationsModelPodcast {
    /**
     * 
     * @type {Array<Track>}
     * @memberof UpcomingNotificationsModelPodcast
     */
    tracks?: Array<Track> | null;
    /**
     * 
     * @type {string}
     * @memberof UpcomingNotificationsModelPodcast
     */
    title?: string | null;
}

/**
 * Check if a given object implements the UpcomingNotificationsModelPodcast interface.
 */
export function instanceOfUpcomingNotificationsModelPodcast(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function UpcomingNotificationsModelPodcastFromJSON(json: any): UpcomingNotificationsModelPodcast {
    return UpcomingNotificationsModelPodcastFromJSONTyped(json, false);
}

export function UpcomingNotificationsModelPodcastFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpcomingNotificationsModelPodcast {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'tracks': !exists(json, 'tracks') ? undefined : (json['tracks'] === null ? null : (json['tracks'] as Array<any>).map(TrackFromJSON)),
        'title': !exists(json, 'title') ? undefined : json['title'],
    };
}

export function UpcomingNotificationsModelPodcastToJSON(value?: UpcomingNotificationsModelPodcast | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'tracks': value.tracks === undefined ? undefined : (value.tracks === null ? null : (value.tracks as Array<any>).map(TrackToJSON)),
        'title': value.title,
    };
}

