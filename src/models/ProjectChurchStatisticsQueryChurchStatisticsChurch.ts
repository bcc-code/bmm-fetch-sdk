/* tslint:disable */
/* eslint-disable */
/**
 * BMM Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ProjectChurchStatisticsQueryChurchStatisticsChurch
 */
export interface ProjectChurchStatisticsQueryChurchStatisticsChurch {
    /**
     * 
     * @type {string}
     * @memberof ProjectChurchStatisticsQueryChurchStatisticsChurch
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectChurchStatisticsQueryChurchStatisticsChurch
     */
    name?: string | null;
}

/**
 * Check if a given object implements the ProjectChurchStatisticsQueryChurchStatisticsChurch interface.
 */
export function instanceOfProjectChurchStatisticsQueryChurchStatisticsChurch(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ProjectChurchStatisticsQueryChurchStatisticsChurchFromJSON(json: any): ProjectChurchStatisticsQueryChurchStatisticsChurch {
    return ProjectChurchStatisticsQueryChurchStatisticsChurchFromJSONTyped(json, false);
}

export function ProjectChurchStatisticsQueryChurchStatisticsChurchFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProjectChurchStatisticsQueryChurchStatisticsChurch {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
    };
}

export function ProjectChurchStatisticsQueryChurchStatisticsChurchToJSON(value?: ProjectChurchStatisticsQueryChurchStatisticsChurch | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
    };
}

