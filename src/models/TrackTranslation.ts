/* tslint:disable */
/* eslint-disable */
/**
 * BMM Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { LanguageEnum } from './LanguageEnum';
import {
    LanguageEnumFromJSON,
    LanguageEnumFromJSONTyped,
    LanguageEnumToJSON,
} from './LanguageEnum';
import type { TrackTranslationMedium } from './TrackTranslationMedium';
import {
    TrackTranslationMediumFromJSON,
    TrackTranslationMediumFromJSONTyped,
    TrackTranslationMediumToJSON,
} from './TrackTranslationMedium';
import type { TrackTranslationTranslatedTrackMeta } from './TrackTranslationTranslatedTrackMeta';
import {
    TrackTranslationTranslatedTrackMetaFromJSON,
    TrackTranslationTranslatedTrackMetaFromJSONTyped,
    TrackTranslationTranslatedTrackMetaToJSON,
} from './TrackTranslationTranslatedTrackMeta';

/**
 * 
 * @export
 * @interface TrackTranslation
 */
export interface TrackTranslation {
    /**
     * 
     * @type {LanguageEnum}
     * @memberof TrackTranslation
     */
    language?: LanguageEnum;
    /**
     * 
     * @type {boolean}
     * @memberof TrackTranslation
     */
    isVisible?: boolean;
    /**
     * 
     * @type {string}
     * @memberof TrackTranslation
     */
    title?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TrackTranslation
     */
    transcription?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TrackTranslation
     */
    publisher?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TrackTranslation
     */
    copyright?: string | null;
    /**
     * 
     * @type {Array<TrackTranslationMedium>}
     * @memberof TrackTranslation
     */
    media?: Array<TrackTranslationMedium> | null;
    /**
     * 
     * @type {TrackTranslationTranslatedTrackMeta}
     * @memberof TrackTranslation
     */
    meta?: TrackTranslationTranslatedTrackMeta;
}

/**
 * Check if a given object implements the TrackTranslation interface.
 */
export function instanceOfTrackTranslation(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TrackTranslationFromJSON(json: any): TrackTranslation {
    return TrackTranslationFromJSONTyped(json, false);
}

export function TrackTranslationFromJSONTyped(json: any, ignoreDiscriminator: boolean): TrackTranslation {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'language': !exists(json, 'language') ? undefined : LanguageEnumFromJSON(json['language']),
        'isVisible': !exists(json, 'is_visible') ? undefined : json['is_visible'],
        'title': !exists(json, 'title') ? undefined : json['title'],
        'transcription': !exists(json, 'transcription') ? undefined : json['transcription'],
        'publisher': !exists(json, 'publisher') ? undefined : json['publisher'],
        'copyright': !exists(json, 'copyright') ? undefined : json['copyright'],
        'media': !exists(json, 'media') ? undefined : (json['media'] === null ? null : (json['media'] as Array<any>).map(TrackTranslationMediumFromJSON)),
        'meta': !exists(json, '_meta') ? undefined : TrackTranslationTranslatedTrackMetaFromJSON(json['_meta']),
    };
}

export function TrackTranslationToJSON(value?: TrackTranslation | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'language': LanguageEnumToJSON(value.language),
        'is_visible': value.isVisible,
        'title': value.title,
        'transcription': value.transcription,
        'publisher': value.publisher,
        'copyright': value.copyright,
        'media': value.media === undefined ? undefined : (value.media === null ? null : (value.media as Array<any>).map(TrackTranslationMediumToJSON)),
        '_meta': TrackTranslationTranslatedTrackMetaToJSON(value.meta),
    };
}

