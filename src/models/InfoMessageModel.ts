/* tslint:disable */
/* eslint-disable */
/**
 * BMM Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface InfoMessageModel
 */
export interface InfoMessageModel {
    /**
     * 
     * @type {number}
     * @memberof InfoMessageModel
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof InfoMessageModel
     */
    readonly type: InfoMessageModelTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof InfoMessageModel
     */
    translatedMessage?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InfoMessageModel
     */
    readonly messageText?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InfoMessageModel
     */
    link?: string | null;
}


/**
 * @export
 */
export const InfoMessageModelTypeEnum = {
    InfoMessage: 'InfoMessage'
} as const;
export type InfoMessageModelTypeEnum = typeof InfoMessageModelTypeEnum[keyof typeof InfoMessageModelTypeEnum];


/**
 * Check if a given object implements the InfoMessageModel interface.
 */
export function instanceOfInfoMessageModel(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function InfoMessageModelFromJSON(json: any): InfoMessageModel {
    return InfoMessageModelFromJSONTyped(json, false);
}

export function InfoMessageModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): InfoMessageModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'type': json['type'],
        'translatedMessage': !exists(json, 'translated_message') ? undefined : json['translated_message'],
        'messageText': !exists(json, 'message_text') ? undefined : json['message_text'],
        'link': !exists(json, 'link') ? undefined : json['link'],
    };
}

export function InfoMessageModelToJSON(value?: InfoMessageModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'translated_message': value.translatedMessage,
        'link': value.link,
    };
}

